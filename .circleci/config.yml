#Alfredo Moreira
#Put this file in a .circleci/ folder
#This file is to be used to run Github Status Checks
version: 2.1
orbs:
  node: circleci/node@5.0.3
  codecov: codecov/codecov@3.2.4
  jq: circleci/jq@2.2.0
  sonarcloud: sonarsource/sonarcloud@1.1.1
  cypress: cypress-io/cypress@2.2.0

jobs:
  linting:
    docker:
      - image: cimg/node:16.18.0
    working_directory: /mnt/ramdisk/inreach-app
    environment:
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - inreach-app-{{ checksum "yarn.lock" }}
            - inreach-app
      - run:
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: EsLint Source Code
          command: npx eslint src
      - run:
          name: EsLint Cypress
          command: npx eslint cypress

  build:
    docker:
      - image: cimg/node:16.18.0
    working_directory: /mnt/ramdisk/inreach-app
    environment:
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - inreach-app-{{ checksum "yarn.lock" }}
            - inreach-app
      - run:
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: Compile Binary
          command: yarn build
          environment:
            CI: 'false'
      - save_cache:
          paths:
            - ~/.cache
          key: inreach-app-{{ checksum "yarn.lock" }}

  e2eprepare:
    docker:
      - image: cimg/node:16.18-browsers
        environment:
          ## this enables colors in the output
          TERM: xterm
    working_directory: /mnt/ramdisk/inreach-app
    environment:
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
    steps:
      - checkout
      - jq/install
      - restore_cache:
          name: Restore Cache
          keys:
            - inreach-app-deps-{{ checksum "yarn.lock" }}
            - inreach-app-deps
      - run:
          name: Install Packages
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: Print API branch
          command: echo "Pulling branch $(jq -r '.api_ci_branch' /mnt/ramdisk/inreach-app/cypress.env.json) from inreach-api"
      - run:
          name: Pull API code
          command: git clone --branch $(jq -r '.api_ci_branch' /mnt/ramdisk/inreach-app/cypress.env.json) https://github.com/weareinreach/inreach-api.git /mnt/ramdisk/inreach-api
      - run:
          name: Create API Env File
          command: |
            cat \<< EOF > /mnt/ramdisk/inreach-api/.env
            MAILGUN_API_KEY=$MAILGUN_API_KEY
            MAILGUN_DOMAIN=$MAILGUN_DOMAIN
            DB_URI=mongodb://localhost:27017/InReach
            ENV=TEST
            SHEETS_API_KEY=$SHEETS_API_KEY
            TEST_DB_URI=mongodb://localhost:27017/InReach
            EOF
      - run:
          name: Install API Packages
          command: |
            cd /mnt/ramdisk/inreach-api
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          paths:
            - ~/.cache
          key: inreach-app-deps-{{ checksum "yarn.lock" }}
      - persist_to_workspace:
          root: /mnt/ramdisk
          paths:
            - inreach-app
            - inreach-api

  e2e:
    environment:
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
    working_directory: /mnt/ramdisk/inreach-app
    parallelism: 8
    resource_class: large
    docker:
      - image: cimg/node:16.18-browsers
        environment:
          ## this enables colors in the output
          TERM: xterm
      ## MongoDB
      - image: mongo:4.4.17
        environment:
          MONGO_INITDB_DATABASE: InReach
    steps:
      - attach_workspace:
          at: /mnt/ramdisk
      - run:
          name: Launch API
          command: |
            cd /mnt/ramdisk/inreach-api
            yarn dev
          background: true
      - restore_cache:
          name: Restore Cache
          keys:
            - inreach-app-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Seed DB
          command: |
            cd /mnt/ramdisk/inreach-api
            yarn seed-docker-db
      - run:
          name: Instantiate API And Run E2E tests
          command: |
            cd /mnt/ramdisk/inreach-app
            yarn test:pre-e2e
            yarn test:e2e:ci:parallel
      - run:
          name: Move reports to instance folders
          command: |
            cd /mnt/ramdisk/inreach-app
            mkdir cypressCoverage/${CIRCLE_NODE_INDEX}
            mkdir mochawesome-report/${CIRCLE_NODE_INDEX}
            cd /mnt/ramdisk/inreach-app/cypressCoverage
            find . ! -name . -prune ! -name ${CIRCLE_NODE_INDEX} -exec mv {} ${CIRCLE_NODE_INDEX}/ \;
            cd /mnt/ramdisk/inreach-app/mochawesome-report
            find . ! -name . -prune ! -name ${CIRCLE_NODE_INDEX} -exec mv {} ${CIRCLE_NODE_INDEX}/ \;
            cd /mnt/ramdisk/inreach-app
      - run:
          name: 'Show Coverage'
          command: yarn show-coverage
      - run:
          name: 'Generate Report'
          command: yarn report:combined
      - run:
          name: 'Generate Report lcov'
          command: yarn report:lcov
      - codecov/upload:
          file: '/mnt/ramdisk/inreach-app/coverageReports/coverage-final.json'
          flags: 'Integration'
      - store_test_results:
          path: /mnt/ramdisk/inreach-app/results
      - persist_to_workspace:
          root: /mnt/ramdisk
          paths:
            - inreach-app

  sonar:
    docker:
      - image: cimg/node:16.18-browsers
    steps:
      - attach_workspace:
          at: /mnt/ramdisk
      - run:
          name: 'Merge Records'
          command: npx lcov-result-merger 'lcov-*.info' 'merged-lcov.info'
      - sonarcloud/scan

workflows:
  version: 2
  development:
    jobs:
      - linting:
          filters:
            branches:
              only: dev
      - build:
          filters:
            branches:
              only: dev
      - e2eprepare:
          filters:
            branches:
              only: dev
      - e2e:
          requires:
            - e2eprepare
          filters:
            branches:
              only: dev
      - sonar:
          context: SonarCloud
          requires:
            - e2e
          filters:
            branches:
              only: dev

  pull_request:
    jobs:
      - linting:
          filters:
            branches:
              ignore: [main, dev]
      - build:
          filters:
            branches:
              ignore: [main, dev]
      - e2eprepare:
          filters:
            branches:
              ignore: [main, dev]
      - e2e:
          requires:
            - e2eprepare
          filters:
            branches:
              ignore: [main, dev]
      - sonar:
          context: SonarCloud
          requires:
            - e2e
          filters:
            branches:
              ignore: [main, dev]
